EECS 598-010: Interactive Robot Manipulators
Resarch Paper Review

Title: Computing and Rendering Point Set Surfaces
Authors: Marc Alexa, Johannes Behr, Daniel Cohen-Or, Shachar Fleishman, David Levin, Claudio T. Silv[a]
[Publication Venue]

Reviewer: Jiatao Fan
[Presentation Date]

In this paper, the authors' novel contribution is that they raise a new concept of 
representing shapes with point sets. First[,] they present a new definition of 
smooth manifold which means a surface formed by point set is smooth under the 
condition that the set of points are sufficientyly close to the original surface. 
The concept is inspired by differential geometry and the idea to minimize the 
geometric error of the approximation. For computing a point on the surface only a 
local neighborhood of that point is required. [redundant: First,] the [spelling: pocedure] projects any point 
near the point set onto the surface. Then, the MLS surface is defined as the points 
projecting onto themselves by locally approximating with polynomials using moving 
least squares(MLS). With this idea, the algorithm only depends on the anticipated 
feature size but not the number of points, which results in small memory footprint 
and versatility to handle any sets. The authors also show that the approximation 
error is bounded for MLS surface, and present methods to change the density of the
points such as down-sampling with decimation based on criterion motivated by [sp: tbe] 
definition of the surface and up-sampling with Voronoi diagrams, in order to allow 
an adjustment of the spacing among the points to control the error. Finally, to 
display the point set surface, the authors also introduce a novel point rendering 
technique which evaluates the local maps according to the image resolution. This 
leads to high quality in shading effects and smooth silhouettes at interactive 
frame rates.

In my point of view, the authors clearly clarify the process to construct the MLS 
surface, the methods to control error as well as the techniques to render the final
surface. The algorithm is a [sp: brillian] application of differential geometry and can 
generate a C^infinity manifold. The space requirement is proportional to the only 
on the anticipated feature size h but not the number of points N = |P|. Apart from 
the generic procedures to define the MLS surface, the authors also [grammar: illustrated] how 
to compute the projection efficiently, which makes it easier and more practical for 
developers to implement. The minimization of Eq. 2 is a non-linear optimization 
problem and is not solvable with deterministic numerical methods because the number 
of minima is only bounded by the number N of points from the original surface. 
However, the authors present practical cases that demonstrate any point r to be 
projected is at most h/2 away from its projection. This [grammar: simplies->simplify] the optimization 
because it enables the implementer to assume that any point to be projected is at 
most h/2 away from its projection, and thus the partial derivative can be easily 
evaluated. They also come up with the idea to fix a subspace for minimization in 
which n cannot vanish so that the constraint ||n|| = 1 is always satisfied, which 
makes the computation of partial derivatives much more efficient. Besides, the 
authors also come up with an idea of interactive rendering approach which is to 
sample the polynomials associated with the representation points rather than really 
projecting the points. This novel approach not only solve the problem that sometimes 
points are not sufficient to render the object in screen but also speed up the 
rendering process. 

One drawback is that the time consumption assessment is not very clear. On a standard 
Pentium PC the points of the bunny were projected at a rate of 1500-3500 points per second,
but it seems slow to project 36K points of the bunny onto the surface in 10-30 seconds

[Identify some interesting future directions]

